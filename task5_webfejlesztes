
<p>Ahogy az előbb már megállapítottuk, a programozó az az ember, aki ért a gépek nyelvén. Gyakran fejlesztőknek hívjuk őket, mivel programokat fejlesztenek.</p>

<p>Sokféle fejlesztő van a világban, akik rengetegféle dolgot csinálnak. A játékfejlesztők játékokat, az alkalmazásfejlesztők alkalmazásokat, és a webfejlesztők – igen, jól tippeltél – weboldalakat készítenek.</p>

<p>Mi az utóbbira fogunk koncentrálni, és azt tanítjuk meg, hogyan legyél webfejlesztő. Egy gyors kérdés:</p> 

<div class="well">
  <p><strong>Mit gondolsz, mire használjuk manapság a weboldalakat?</strong></p>
  <ul id="check-list-box" class="list-group checked-list-box">
    <li class="list-group-item">Információ átadására (mint egy személyes blog vagy egy kisebb üzleti weboldal).</li>
    <li class="list-group-item">Komplex feladatok megoldására (képek szerkesztésére, azonnali üzenetküldésre stb.)</li>
    <li class="list-group-item">Játékokra.</li>
  </ul>
  <button class="btn btn-primary center-block" id="get-checked-data">Ellenőrzöm a válaszomat</button>
</div>

<div class="show-when-answered-all" style="display:none;">
  <div class="alert alert-success" role="alert">
    <strong>Igen, jól válaszoltál!</strong> Egy modern weboldal minderre képes!
  </div>
</div>

<div class="show-when-answered-else" style="display:none;">
  <div class="alert alert-success" role="alert">
    <strong>Jó válasz!</strong> Ezt is meg tudja csinálni, és éppenséggel minden mást is, ami azon a listán szerepel.
  </div>
</div>

<div class="show-when-answered" style="display:none;">
  <p>Az internet annyira erős lett az utóbbi pár évben, hogy most már majdnem minden alkalmazást el tudunk készíteni a neten. Ezeket az összetett alkalmazásokat <strong>netes alkalmazásoknak</strong> (webappoknak) hívjuk.</p>

  <p>Webfejlesztőként egyaránt képes leszel ilyen alkalmazások és egyszerűbb weboldalak készítésére is, mint például egy kis céges honlap vagy egy blog.</p>

  <p>Jól hangzik? Akkor haladjunk is tovább!</p>
</div>

<script>
  
  var isSolved = false;
  var submissionString = ''; // This is used to save the submission data.

  $(function () {
      $('.list-group.checked-list-box .list-group-item').each(function () {
          
          // Settings
          var $widget = $(this),
              $checkbox = $('<input type="checkbox" class="hidden" />'),
              color = ($widget.data('color') ? $widget.data('color') : "primary"),
              style = ($widget.data('style') == "button" ? "btn-" : "list-group-item-"),
              settings = {
                  on: {
                      icon: 'fa fa-check-square-o'
                  },
                  off: {
                      icon: 'fa fa-square-o'
                  }
              };
              
          $widget.css('cursor', 'pointer')
          $widget.append($checkbox);

          // Event Handlers
          $widget.on('click', function () {
              $checkbox.prop('checked', !$checkbox.is(':checked'));
              $checkbox.triggerHandler('change');
              updateDisplay();
          });
          $checkbox.on('change', function () {
              updateDisplay();
          });
            

          // Actions
          function updateDisplay() {
              var isChecked = $checkbox.is(':checked');

              // Set the button's state
              $widget.data('state', (isChecked) ? "on" : "off");

              // Set the button's icon
              $widget.find('.state-icon')
                  .removeClass()
                  .addClass('state-icon ' + settings[$widget.data('state')].icon);

              // Update the button's color
              if (isChecked) {
                  $widget.addClass(style + color + ' active');
              } else {
                  $widget.removeClass(style + color + ' active');
              }
          }

          // Initialization
          function init() {
              
              if ($widget.data('checked') == true) {
                  $checkbox.prop('checked', !$checkbox.is(':checked'));
              }
              
              updateDisplay();

              // Inject the icon if applicable
              if ($widget.find('.state-icon').length == 0) {
                  $widget.prepend('<span class="state-icon ' + settings[$widget.data('state')].icon + '"></span>');
              }
          }
          init();
      });
      
      $('#get-checked-data').on('click', function(event) {
          event.preventDefault(); 
          var checkedItems = {}, counter = 0;
          submissionString = ''; // Empties the previously saved data from the variable.
          $("#check-list-box li.active").each(function(idx, li) {
              checkedItems[counter] = $(li).text();
              submissionString = submissionString + $(li).text() + ';'; //Saves the checked lis to string.
              counter++;
          });
          if(Object.keys(checkedItems).length > 2) {
            $('.show-when-answered-else').hide();
            $('.show-when-answered-all').fadeIn();
            $('.show-when-answered').fadeIn();
            isSolved = true;
          } else if(Object.keys(checkedItems).length > 0) {
            $.each( checkedItems, function( key, value ) {
                if(checkedItems[key] === "All of the above.") {
                  $('.show-when-answered-else').hide();
                  $('.show-when-answered-all').fadeIn();
                  $('.show-when-answered').fadeIn();
                  isSolved = true;
                } else {
                  $('.show-when-answered-all').hide();
                  $('.show-when-answered-else').fadeIn();
                  $('.show-when-answered').fadeIn();
                  isSolved = true;
                }
              });
          } else {
            $('.show-when-answered').fadeIn();
          };
      });
  });
</script>
